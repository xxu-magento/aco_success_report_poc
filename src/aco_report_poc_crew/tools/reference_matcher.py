from typing import Any, Dict, List, Set, Type
from crewai.tools import BaseTool
from pydantic import BaseModel, Field

# This tool checks if metric codes and initiative IDs in stories_data exist in analyzer_insights.
# It helps ensure that the data used in the report is consistent with the insights generated by the analyzer.
class RefMatcherInput(BaseModel):
    stories_data: Dict[str, Any]    = Field(...)
    analyzer_insights: Dict[str, Any] = Field(...)


class ReferenceMatcher(BaseTool):
    name: str = "reference_matcher"
    description: str = "Checks metric codes and initiative IDs in stories_data exist in analyzer_insights."
    args_schema: Type[BaseModel] = RefMatcherInput

    def _run(
        self,
        stories_data: Dict[str, Any],
        analyzer_insights: Dict[str, Any],
    ) -> List[str]:
        issues: List[str] = []

        valid_inits: Set[str] = set(analyzer_insights.keys())
        valid_metrics: Set[str] = set()
        for init in analyzer_insights.values():
            for dim in init.values():
                valid_metrics.update(dim["metrics"].keys())

        # Top Highlights
        for idx, item in enumerate(stories_data.get("Top Highlights", [])):
            kpi = item.get("kpi")
            if kpi not in valid_metrics:
                issues.append(f"Top Highlights[{idx}].kpi '{kpi}' not in analyzer insights")

        # Dimension pages
        for dim, obj in stories_data.items():
            if dim in ("Top Highlights",):
                continue
            for m_code in obj.get("metrics", {}).keys():
                if m_code not in valid_metrics:
                    issues.append(f"{dim}.metrics.{m_code} not in analyzer insights")

        return issues
